/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "Math",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Math__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "EAS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EAS__factory>;
    getContractFactory(
      name: "EIP1271Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP1271Verifier__factory>;
    getContractFactory(
      name: "EIP712Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Proxy__factory>;
    getContractFactory(
      name: "PermissionedEIP712Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PermissionedEIP712Proxy__factory>;
    getContractFactory(
      name: "IEAS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEAS__factory>;
    getContractFactory(
      name: "Indexer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Indexer__factory>;
    getContractFactory(
      name: "ISchemaRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISchemaRegistry__factory>;
    getContractFactory(
      name: "ISemver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISemver__factory>;
    getContractFactory(
      name: "AttestationResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AttestationResolver__factory>;
    getContractFactory(
      name: "AttesterResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AttesterResolver__factory>;
    getContractFactory(
      name: "DataResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DataResolver__factory>;
    getContractFactory(
      name: "ExpirationTimeResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpirationTimeResolver__factory>;
    getContractFactory(
      name: "PayingResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PayingResolver__factory>;
    getContractFactory(
      name: "RecipientResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RecipientResolver__factory>;
    getContractFactory(
      name: "RevocationResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevocationResolver__factory>;
    getContractFactory(
      name: "TokenResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenResolver__factory>;
    getContractFactory(
      name: "ValueResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValueResolver__factory>;
    getContractFactory(
      name: "ISchemaResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISchemaResolver__factory>;
    getContractFactory(
      name: "SchemaResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SchemaResolver__factory>;
    getContractFactory(
      name: "SchemaRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SchemaRegistry__factory>;
    getContractFactory(
      name: "Semver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Semver__factory>;
    getContractFactory(
      name: "TestEIP1271Signer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestEIP1271Signer__factory>;
    getContractFactory(
      name: "TestEIP1271Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestEIP1271Verifier__factory>;
    getContractFactory(
      name: "TestEIP712Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestEIP712Proxy__factory>;
    getContractFactory(
      name: "TestEAS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestEAS__factory>;
    getContractFactory(
      name: "TestERC20Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20Token__factory>;
    getContractFactory(
      name: "TestSchemaResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestSchemaResolver__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC1271",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "ECDSA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "EIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "Math",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Math>;
    getContractAt(
      name: "ShortStrings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "EAS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EAS>;
    getContractAt(
      name: "EIP1271Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP1271Verifier>;
    getContractAt(
      name: "EIP712Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Proxy>;
    getContractAt(
      name: "PermissionedEIP712Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PermissionedEIP712Proxy>;
    getContractAt(
      name: "IEAS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEAS>;
    getContractAt(
      name: "Indexer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Indexer>;
    getContractAt(
      name: "ISchemaRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISchemaRegistry>;
    getContractAt(
      name: "ISemver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISemver>;
    getContractAt(
      name: "AttestationResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AttestationResolver>;
    getContractAt(
      name: "AttesterResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AttesterResolver>;
    getContractAt(
      name: "DataResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DataResolver>;
    getContractAt(
      name: "ExpirationTimeResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ExpirationTimeResolver>;
    getContractAt(
      name: "PayingResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PayingResolver>;
    getContractAt(
      name: "RecipientResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RecipientResolver>;
    getContractAt(
      name: "RevocationResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RevocationResolver>;
    getContractAt(
      name: "TokenResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TokenResolver>;
    getContractAt(
      name: "ValueResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ValueResolver>;
    getContractAt(
      name: "ISchemaResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISchemaResolver>;
    getContractAt(
      name: "SchemaResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SchemaResolver>;
    getContractAt(
      name: "SchemaRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SchemaRegistry>;
    getContractAt(
      name: "Semver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Semver>;
    getContractAt(
      name: "TestEIP1271Signer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestEIP1271Signer>;
    getContractAt(
      name: "TestEIP1271Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestEIP1271Verifier>;
    getContractAt(
      name: "TestEIP712Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestEIP712Proxy>;
    getContractAt(
      name: "TestEAS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestEAS>;
    getContractAt(
      name: "TestERC20Token",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20Token>;
    getContractAt(
      name: "TestSchemaResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestSchemaResolver>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "Math",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "EAS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EAS>;
    deployContract(
      name: "EIP1271Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP1271Verifier>;
    deployContract(
      name: "EIP712Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712Proxy>;
    deployContract(
      name: "PermissionedEIP712Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PermissionedEIP712Proxy>;
    deployContract(
      name: "IEAS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEAS>;
    deployContract(
      name: "Indexer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Indexer>;
    deployContract(
      name: "ISchemaRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISchemaRegistry>;
    deployContract(
      name: "ISemver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISemver>;
    deployContract(
      name: "AttestationResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AttestationResolver>;
    deployContract(
      name: "AttesterResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AttesterResolver>;
    deployContract(
      name: "DataResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataResolver>;
    deployContract(
      name: "ExpirationTimeResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExpirationTimeResolver>;
    deployContract(
      name: "PayingResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PayingResolver>;
    deployContract(
      name: "RecipientResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RecipientResolver>;
    deployContract(
      name: "RevocationResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevocationResolver>;
    deployContract(
      name: "TokenResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenResolver>;
    deployContract(
      name: "ValueResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValueResolver>;
    deployContract(
      name: "ISchemaResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISchemaResolver>;
    deployContract(
      name: "SchemaResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SchemaResolver>;
    deployContract(
      name: "SchemaRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SchemaRegistry>;
    deployContract(
      name: "Semver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Semver>;
    deployContract(
      name: "TestEIP1271Signer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEIP1271Signer>;
    deployContract(
      name: "TestEIP1271Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEIP1271Verifier>;
    deployContract(
      name: "TestEIP712Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEIP712Proxy>;
    deployContract(
      name: "TestEAS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEAS>;
    deployContract(
      name: "TestERC20Token",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestERC20Token>;
    deployContract(
      name: "TestSchemaResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestSchemaResolver>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC1271",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ECDSA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "EIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "Math",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Math>;
    deployContract(
      name: "ShortStrings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "EAS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EAS>;
    deployContract(
      name: "EIP1271Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP1271Verifier>;
    deployContract(
      name: "EIP712Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712Proxy>;
    deployContract(
      name: "PermissionedEIP712Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PermissionedEIP712Proxy>;
    deployContract(
      name: "IEAS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEAS>;
    deployContract(
      name: "Indexer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Indexer>;
    deployContract(
      name: "ISchemaRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISchemaRegistry>;
    deployContract(
      name: "ISemver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISemver>;
    deployContract(
      name: "AttestationResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AttestationResolver>;
    deployContract(
      name: "AttesterResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AttesterResolver>;
    deployContract(
      name: "DataResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DataResolver>;
    deployContract(
      name: "ExpirationTimeResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ExpirationTimeResolver>;
    deployContract(
      name: "PayingResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PayingResolver>;
    deployContract(
      name: "RecipientResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RecipientResolver>;
    deployContract(
      name: "RevocationResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevocationResolver>;
    deployContract(
      name: "TokenResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TokenResolver>;
    deployContract(
      name: "ValueResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValueResolver>;
    deployContract(
      name: "ISchemaResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISchemaResolver>;
    deployContract(
      name: "SchemaResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SchemaResolver>;
    deployContract(
      name: "SchemaRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SchemaRegistry>;
    deployContract(
      name: "Semver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Semver>;
    deployContract(
      name: "TestEIP1271Signer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEIP1271Signer>;
    deployContract(
      name: "TestEIP1271Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEIP1271Verifier>;
    deployContract(
      name: "TestEIP712Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEIP712Proxy>;
    deployContract(
      name: "TestEAS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestEAS>;
    deployContract(
      name: "TestERC20Token",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestERC20Token>;
    deployContract(
      name: "TestSchemaResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestSchemaResolver>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
