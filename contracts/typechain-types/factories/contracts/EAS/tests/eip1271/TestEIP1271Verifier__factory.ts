/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  TestEIP1271Verifier,
  TestEIP1271VerifierInterface,
} from "../../../../../contracts/EAS/tests/eip1271/TestEIP1271Verifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DeadlineExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidNonce",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidShortString",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "str",
        type: "string",
      },
    ],
    name: "StringTooLong",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "oldNonce",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newNonce",
        type: "uint256",
      },
    ],
    name: "NonceIncreased",
    type: "event",
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAttestTypeHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getDomainSeparator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "getNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRevokeTypeHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newNonce",
        type: "uint256",
      },
    ],
    name: "increaseNonce",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "schema",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "address",
                name: "recipient",
                type: "address",
              },
              {
                internalType: "uint64",
                name: "expirationTime",
                type: "uint64",
              },
              {
                internalType: "bool",
                name: "revocable",
                type: "bool",
              },
              {
                internalType: "bytes32",
                name: "refUID",
                type: "bytes32",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct AttestationRequestData",
            name: "data",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct Signature",
            name: "signature",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "attester",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "deadline",
            type: "uint64",
          },
        ],
        internalType: "struct DelegatedAttestationRequest",
        name: "request",
        type: "tuple",
      },
    ],
    name: "verifyAttest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "schema",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct RevocationRequestData",
            name: "data",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct Signature",
            name: "signature",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "revoker",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "deadline",
            type: "uint64",
          },
        ],
        internalType: "struct DelegatedRevocationRequest",
        name: "request",
        type: "tuple",
      },
    ],
    name: "verifyRevoke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101c060405234801561001157600080fd5b50604051611802380380611802833981016040819052610030916101e1565b6040805180820190915260058152640312e332e360dc1b60208201526001608052600360a052600060c08190528291908290829061006f90839061012d565b6101805261007e81600161012d565b6101a05281516020808401919091206101405281519082012061016052466101005261010e6101405161016051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60e052505030610120526002610124838261031c565b50505050610431565b60006020835110156101495761014283610160565b905061015a565b81610154848261031c565b5060ff90505b92915050565b600080829050601f81511115610194578260405163305a27a960e01b815260040161018b91906103da565b60405180910390fd5b805161019f8261040d565b179392505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156101d85781810151838201526020016101c0565b50506000910152565b6000602082840312156101f357600080fd5b81516001600160401b0381111561020957600080fd5b8201601f8101841361021a57600080fd5b80516001600160401b03811115610233576102336101a7565b604051601f8201601f19908116603f011681016001600160401b0381118282101715610261576102616101a7565b60405281815282820160200186101561027957600080fd5b61028a8260208301602086016101bd565b95945050505050565b600181811c908216806102a757607f821691505b6020821081036102c757634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561031757806000526020600020601f840160051c810160208510156102f45750805b601f840160051c820191505b818110156103145760008155600101610300565b50505b505050565b81516001600160401b03811115610335576103356101a7565b610349816103438454610293565b846102cd565b6020601f82116001811461037d57600083156103655750848201515b600019600385901b1c1916600184901b178455610314565b600084815260208120601f198516915b828110156103ad578785015182556020948501946001909201910161038d565b50848210156103cb5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b60208152600082518060208401526103f98160408501602087016101bd565b601f01601f19169190910160400192915050565b805160208083015191908110156102c75760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516113566104ac60003960006104870152600061045a0152600061088901526000610861015260006107bc015260006107e6015260006108100152600061028d015260006102640152600061023b01526113566000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806384b0196e1161006657806384b0196e14610133578063b82b7acc1461014e578063b83010d314610161578063dda94e2114610187578063ed24911d1461019a57600080fd5b806312b11a17146100a357806317d7de7c146100d85780632d0335ab146100ed57806354fd4d501461011657806379f7573a1461011e575b600080fd5b7ffeb2925a02bae3dae48d424a0437a2b6ac939aa9230ddc55a1a76f065d9880765b6040519081526020015b60405180910390f35b6100e06101a2565b6040516100cf9190610d9c565b6100c56100fb366004610dd2565b6001600160a01b031660009081526003602052604090205490565b6100e0610234565b61013161012c366004610ded565b6102d7565b005b61013b610357565b6040516100cf9796959493929190610e06565b61013161015c36600461102c565b61039d565b7fb5d556f07587ec0f08cf386545cc4362c702a001650c2058002615ee5c9d1e756100c5565b61013161019536600461115c565b6103a9565b6100c56103b2565b6060600280546101b1906111f4565b80601f01602080910402602001604051908101604052809291908181526020018280546101dd906111f4565b801561022a5780601f106101ff5761010080835404028352916020019161022a565b820191906000526020600020905b81548152906001019060200180831161020d57829003601f168201915b5050505050905090565b606061025f7f00000000000000000000000000000000000000000000000000000000000000006103c1565b6102887f00000000000000000000000000000000000000000000000000000000000000006103c1565b6102b17f00000000000000000000000000000000000000000000000000000000000000006103c1565b6040516020016102c39392919061122e565b604051602081830303815290604052905090565b3360009081526003602052604090205480821161030757604051633ab3447f60e11b815260040160405180910390fd5b3360009081526003602090815260409182902084905581518381529081018490527f57b09af877df9068fd60a69d7b21f5576b8b38955812d6ae4ac52942f1e38fb7910160405180910390a15050565b60006060806000806000606061036b610453565b610373610480565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6103a6816104ad565b50565b6103a68161069d565b60006103bc6107af565b905090565b606060006103ce836108da565b60010190506000816001600160401b038111156103ed576103ed610e9e565b6040519080825280601f01601f191660200182016040528015610417576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461042157509392505050565b60606103bc7f000000000000000000000000000000000000000000000000000000000000000060006109b3565b60606103bc7f000000000000000000000000000000000000000000000000000000000000000060016109b3565b60808101516001600160401b0316158015906104de5750426001600160401b031681608001516001600160401b0316105b156104fc57604051631ab7da6b60e01b815260040160405180910390fd5b6020808201516040808401516060808601518651855186880151868801519488015160808901518051908b012060a08a01516001600160a01b03871660009081526003909c52988b2080549a9b989a989961061c997ffeb2925a02bae3dae48d424a0437a2b6ac939aa9230ddc55a1a76f065d988076999493928c6105808361128d565b919050558e608001516040516020016106019b9a999897969594939291909a8b526001600160a01b03998a1660208c015260408b01989098529590971660608901526001600160401b03938416608089015291151560a088015260c087015260e0860152610100850193909352610120840152166101408201526101600190565b60405160208183030381529060405280519060200120610a5f565b905061067a84606001518284602001518560400151866000015160405160200161066693929190928352602083019190915260f81b6001600160f81b031916604082015260410190565b604051602081830303815290604052610a8c565b61069757604051638baa579f60e01b815260040160405180910390fd5b50505050565b60808101516001600160401b0316158015906106ce5750426001600160401b031681608001516001600160401b0316105b156106ec57604051631ab7da6b60e01b815260040160405180910390fd5b602080820151604080840151606085015185518451858701516001600160a01b03841660009081526003909852948720805496979496949561061c957fb5d556f07587ec0f08cf386545cc4362c702a001650c2058002615ee5c9d1e7595949392886107578361128d565b909155506080808c01516040805160208101999099526001600160a01b039097169688019690965260608701949094529285019190915260a084015260c08301526001600160401b031660e082015261010001610601565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561080857507f000000000000000000000000000000000000000000000000000000000000000046145b1561083257507f000000000000000000000000000000000000000000000000000000000000000090565b6103bc604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106109195772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610945576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061096357662386f26fc10000830492506010015b6305f5e100831061097b576305f5e100830492506008015b612710831061098f57612710830492506004015b606483106109a1576064830492506002015b600a83106109ad576001015b92915050565b606060ff83146109cd576109c683610aee565b90506109ad565b8180546109d9906111f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610a05906111f4565b8015610a525780601f10610a2757610100808354040283529160200191610a52565b820191906000526020600020905b815481529060010190602001808311610a3557829003601f168201915b5050505050905092915050565b60006109ad610a6c6107af565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806000610a9b8585610b2d565b5090925090506000816003811115610ab557610ab56112b4565b148015610ad35750856001600160a01b0316826001600160a01b0316145b80610ae45750610ae4868686610b7a565b9695505050505050565b60606000610afb83610c55565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b60008060008351604103610b675760208401516040850151606086015160001a610b5988828585610c7d565b955095509550505050610b73565b50508151600091506002905b9250925092565b6000806000856001600160a01b03168585604051602401610b9c9291906112ca565b60408051601f198184030181529181526020820180516001600160e01b0316630b135d3f60e11b17905251610bd191906112eb565b600060405180830381855afa9150503d8060008114610c0c576040519150601f19603f3d011682016040523d82523d6000602084013e610c11565b606091505b5091509150818015610c2557506020815110155b8015610ae457508051630b135d3f60e11b90610c4a9083016020908101908401611307565b149695505050505050565b600060ff8216601f8111156109ad57604051632cd44ac360e21b815260040160405180910390fd5b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610cb85750600091506003905082610d42565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610d0c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610d3857506000925060019150829050610d42565b9250600091508190505b9450945094915050565b60005b83811015610d67578181015183820152602001610d4f565b50506000910152565b60008151808452610d88816020860160208601610d4c565b601f01601f19169290920160200192915050565b602081526000610daf6020830184610d70565b9392505050565b80356001600160a01b0381168114610dcd57600080fd5b919050565b600060208284031215610de457600080fd5b610daf82610db6565b600060208284031215610dff57600080fd5b5035919050565b60ff60f81b8816815260e060208201526000610e2560e0830189610d70565b8281036040840152610e378189610d70565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015610e8d578351835260209384019390920191600101610e6f565b50909b9a5050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715610ed657610ed6610e9e565b60405290565b60405160c081016001600160401b0381118282101715610ed657610ed6610e9e565b604080519081016001600160401b0381118282101715610ed657610ed6610e9e565b80356001600160401b0381168114610dcd57600080fd5b600082601f830112610f4857600080fd5b81356001600160401b03811115610f6157610f61610e9e565b604051601f8201601f19908116603f011681016001600160401b0381118282101715610f8f57610f8f610e9e565b604052818152838201602001851015610fa757600080fd5b816020850160208301376000918101602001919091529392505050565b600060608284031215610fd657600080fd5b604051606081016001600160401b0381118282101715610ff857610ff8610e9e565b604052905080823560ff8116811461100f57600080fd5b815260208381013590820152604092830135920191909152919050565b60006020828403121561103e57600080fd5b81356001600160401b0381111561105457600080fd5b820160e0818503121561106657600080fd5b61106e610eb4565b8135815260208201356001600160401b0381111561108b57600080fd5b820160c0818703121561109d57600080fd5b6110a5610edc565b6110ae82610db6565b81526110bc60208301610f20565b6020820152604082013580151581146110d457600080fd5b60408201526060828101359082015260808201356001600160401b038111156110fc57600080fd5b61110888828501610f37565b60808301525060a09182013591810191909152602082015261112d8560408401610fc4565b604082015261113e60a08301610db6565b606082015261114f60c08301610f20565b6080820152949350505050565b60008183036101008112801561117157600080fd5b50600061117c610eb4565b843581526040601f1984011215611191578182fd5b611199610efe565b6020868101358252604087013581830181905290830182905290935091506111c48660608701610fc4565b60408201526111d560c08601610db6565b60608201526111e660e08601610f20565b608082015295945050505050565b600181811c9082168061120857607f821691505b60208210810361122857634e487b7160e01b600052602260045260246000fd5b50919050565b60008451611240818460208901610d4c565b601760f91b908301908152845161125e816001840160208901610d4c565b601760f91b600192909101918201528351611280816002840160208801610d4c565b0160020195945050505050565b6000600182016112ad57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052602160045260246000fd5b8281526040602082015260006112e36040830184610d70565b949350505050565b600082516112fd818460208701610d4c565b9190910192915050565b60006020828403121561131957600080fd5b505191905056fea264697066735822122049ed715aceefa2cccdef97fb78e67b98f2eeec475433ea3fa27c7448c9f2a6f664736f6c634300081b0033";

type TestEIP1271VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestEIP1271VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestEIP1271Verifier__factory extends ContractFactory {
  constructor(...args: TestEIP1271VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name, overrides || {});
  }
  override deploy(
    name: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name, overrides || {}) as Promise<
      TestEIP1271Verifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TestEIP1271Verifier__factory {
    return super.connect(runner) as TestEIP1271Verifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestEIP1271VerifierInterface {
    return new Interface(_abi) as TestEIP1271VerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestEIP1271Verifier {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TestEIP1271Verifier;
  }
}
