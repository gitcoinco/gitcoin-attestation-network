/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  DataResolver,
  DataResolverInterface,
} from "../../../../../contracts/EAS/resolver/examples/DataResolver";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEAS",
        name: "eas",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AccessDenied",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientValue",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEAS",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidLength",
    type: "error",
  },
  {
    inputs: [],
    name: "NotPayable",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "uid",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "schema",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "time",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "expirationTime",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "revocationTime",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "refUID",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "address",
            name: "attester",
            type: "address",
          },
          {
            internalType: "bool",
            name: "revocable",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Attestation",
        name: "attestation",
        type: "tuple",
      },
    ],
    name: "attest",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "isPayable",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "uid",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "schema",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "time",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "expirationTime",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "revocationTime",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "refUID",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "address",
            name: "attester",
            type: "address",
          },
          {
            internalType: "bool",
            name: "revocable",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Attestation[]",
        name: "attestations",
        type: "tuple[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "multiAttest",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "uid",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "schema",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "time",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "expirationTime",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "revocationTime",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "refUID",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "address",
            name: "attester",
            type: "address",
          },
          {
            internalType: "bool",
            name: "revocable",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Attestation[]",
        name: "attestations",
        type: "tuple[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "multiRevoke",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "uid",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "schema",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "time",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "expirationTime",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "revocationTime",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "refUID",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "address",
            name: "attester",
            type: "address",
          },
          {
            internalType: "bool",
            name: "revocable",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Attestation",
        name: "attestation",
        type: "tuple",
      },
    ],
    name: "revoke",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x61010060405234801561001157600080fd5b5060405161091938038061091983398101604081905261003091610079565b6001608052600360a052600060c052806001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e052506100a9565b60006020828403121561008b57600080fd5b81516001600160a01b03811681146100a257600080fd5b9392505050565b60805160a05160c05160e0516108376100e2600039600061040d01526000610170015260006101470152600061011e01526108376000f3fe6080604052600436106100595760003560e01c806354fd4d501461007c57806388e5b2d9146100a757806391db0b7e146100ca578063ce46e046146100dd578063e49617e1146100f1578063e60c35051461010457600080fd5b3661007757604051631574f9f360e01b815260040160405180910390fd5b600080fd5b34801561008857600080fd5b50610091610117565b60405161009e91906105e2565b60405180910390f35b6100ba6100b5366004610661565b6101ba565b604051901515815260200161009e565b6100ba6100d8366004610661565b610289565b3480156100e957600080fd5b5060006100ba565b6100ba6100ff3660046106d2565b610348565b6100ba6101123660046106d2565b61035b565b60606101427f000000000000000000000000000000000000000000000000000000000000000061036f565b61016b7f000000000000000000000000000000000000000000000000000000000000000061036f565b6101947f000000000000000000000000000000000000000000000000000000000000000061036f565b6040516020016101a69392919061070e565b604051602081830303815290604052905090565b60006101c4610402565b838281146101e55760405163251f56a160e21b815260040160405180910390fd5b3460005b828110156102795760008686838181106102055761020561076d565b9050602002013590508281111561022f5760405163044044a560e21b815260040160405180910390fd5b61025c8989848181106102445761024461076d565b90506020028101906102569190610783565b50600190565b61026d576000945050505050610281565b909103906001016101e9565b506001925050505b949350505050565b6000610293610402565b838281146102b45760405163251f56a160e21b815260040160405180910390fd5b3460005b828110156102795760008686838181106102d4576102d461076d565b905060200201359050828111156102fe5760405163044044a560e21b815260040160405180910390fd5b61032b8989848181106103135761031361076d565b90506020028101906103259190610783565b8261044d565b61033c576000945050505050610281565b909103906001016102b8565b6000610352610402565b60015b92915050565b6000610365610402565b610355823461044d565b6060600061037c836104e6565b600101905060008167ffffffffffffffff81111561039c5761039c6107a4565b6040519080825280601f01601f1916602001820160405280156103c6576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846103d057509392505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461044b57604051634ca8886760e01b815260040160405180910390fd5b565b600061045d6101208401846107ba565b905060011480156104df575060006104796101208501856107ba565b600081811061048a5761048a61076d565b9050013560f81c60f81b6001600160f81b03191614806104df5750600160f81b6104b86101208501856107ba565b60008181106104c9576104c961076d565b9050013560f81c60f81b6001600160f81b031916145b9392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106105255772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610551576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061056f57662386f26fc10000830492506010015b6305f5e1008310610587576305f5e100830492506008015b612710831061059b57612710830492506004015b606483106105ad576064830492506002015b600a83106103555760010192915050565b60005b838110156105d95781810151838201526020016105c1565b50506000910152565b60208152600082518060208401526106018160408501602087016105be565b601f01601f19169190910160400192915050565b60008083601f84011261062757600080fd5b50813567ffffffffffffffff81111561063f57600080fd5b6020830191508360208260051b850101111561065a57600080fd5b9250929050565b6000806000806040858703121561067757600080fd5b843567ffffffffffffffff81111561068e57600080fd5b61069a87828801610615565b909550935050602085013567ffffffffffffffff8111156106ba57600080fd5b6106c687828801610615565b95989497509550505050565b6000602082840312156106e457600080fd5b813567ffffffffffffffff8111156106fb57600080fd5b820161014081850312156104df57600080fd5b600084516107208184602089016105be565b601760f91b908301908152845161073e8160018401602089016105be565b601760f91b6001929091019182015283516107608160028401602088016105be565b0160020195945050505050565b634e487b7160e01b600052603260045260246000fd5b6000823561013e1983360301811261079a57600080fd5b9190910192915050565b634e487b7160e01b600052604160045260246000fd5b6000808335601e198436030181126107d157600080fd5b83018035915067ffffffffffffffff8211156107ec57600080fd5b60200191503681900382131561065a57600080fdfea264697066735822122032a5374f036be77ccd63b6260e466cd4ce6d29f914ec1f6cbb684728dda93fce64736f6c634300081b0033";

type DataResolverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataResolverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DataResolver__factory extends ContractFactory {
  constructor(...args: DataResolverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    eas: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(eas, overrides || {});
  }
  override deploy(
    eas: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(eas, overrides || {}) as Promise<
      DataResolver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DataResolver__factory {
    return super.connect(runner) as DataResolver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataResolverInterface {
    return new Interface(_abi) as DataResolverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DataResolver {
    return new Contract(address, _abi, runner) as unknown as DataResolver;
  }
}
